

<div id='map' class="w-100" style='height: 100vh;'></div>

<div id="event_description" class="text-white p-2 m-0">
    <div id="view_route" class="">
        <nav id="menu_event_pg"></nav>
        <div id="meetpoint" class="m-1 mb-3 p-3 border-primary border rounded bg-dark">
           <%= render partial: "events/meetpoint" %>
        </div>
                
        <div class="">
            <div id="meet_point" class="ml-2">
            </div>
            <div id="route_detail" class="ml-2"> 
            </div>
        </div>
    </div>


    <div id="view_colab" class="ml-2 d-none">
        <h4> 
            <% if @event.invites.count != 0 %>
                <%= @event.invites.count %>
            <% end %>
            Collaborators
         </h4>
        <% if @event.invites.count != 0 %>
            <% @event.invites.each do |i| %> 
                <div>
                        <%= i.user.username %>,
                        <% lang = i.user.lang %>
                        <span class="text-success">
                            <%= "Ruby" if lang == "ruby" %>
                            <%= "CSS" if lang == "css" %>
                            <%= "Java-Script" if lang == "javascript" %>
                            <%= "Python" if lang == "python" %>
                            <%= ['Specialist', 'Master', 'Intermediate', 'Novice'].sample %>
                        </span>
                </div>
            <% end %>
        <% end %>
        <br>
        <button type="button" class="back_btn btn btn-danger mr-2">Back</button>
    </div>
</div>

<script>
$('.back_btn').on('click', () => { //sync detail
    $('#view_colab').addClass('d-none');
    $('#view_route').removeClass('d-none');
});

function afterLoad() {
    var link = document.createElement('a');
    link.className = 'mr-3 ml-2 mb-2 btn btn-primary';
    link.id = "view_colab_btn";
    link.textContent = 'View Collaborators';
    var layers = document.getElementById('menu_event_pg');
    layers.append(link);

    $('#view_colab_btn').on('click', () => {
        $('#view_route').addClass('d-none');
        $('#view_colab').removeClass('d-none');
    });
}

$(document).on('turbolinks:load', function(){
//-----------------------------------------------------------------------------
// MAPBOX SCRIPT START
    let nos_routes = 0; //for clear_routes
    var center_calc = `${<%= @center %>}`;
    center_calc = center_calc.split(',');
    let center_cor = [parseFloat(center_calc[0]), parseFloat(center_calc[1])];
    mapboxgl.accessToken = 'pk.eyJ1IjoibGVvbmZ1cnkiLCJhIjoiY2pyaDUxNDZnMDQ0bzQ1cWp0MjFqNDh5aSJ9.lXa113BsThiaf5YBcxwQFA';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        // center: center_cor, // kuala lumpur //to be dynamic
        // zoom: center_calc[2],
        center: [101.95349576, 4.18341239],
        zoom: 7,
        pitch: 45, //pitch adjusts view from above
        bearing: 0, //bearings adjust latitude baseline
    });

    map.on("load", () => {
        $.ajax({
            url: "/event_map",
            method: "POST",
            data: {"event_id": "<%= @event.id %>"},
            dataType: "JSON",
            success: function(response){
                map.addSource('colabs', {
                    type: 'geojson',
                    data: response[0]
                }); 
                
                map.addLayer({
                    'id': 'colabs',
                    'type': 'circle', //fill, line, symbol, circle, heatmap, fill-extrusion, raster, hillshade, background
                    'source': 'colabs',
                    'layout': {
                    'visibility': 'visible'
                    },
                    'paint': {
                        'circle-radius': 20,
                        'circle-color': 'rgba(255,0,0,0)' // pin color
                    },
                }); 

                map.addSource('destination', {
                    type: 'geojson',
                    data: response[1]
                }); 

                map.addLayer({
                    'id': 'destination',
                    'type': 'circle', //fill, line, symbol, circle, heatmap, fill-extrusion, raster, hillshade, background
                    'source': 'destination',
                    'layout': {
                    'visibility': 'visible'
                    },
                    'paint': {
                        'circle-radius': 18,
                        'circle-color': 'rgba(0,255,0,0)' // pin color
                    },
                }); 


                map.addSource('midpoint_all', {
                    type: 'geojson',
                    data: response[2]
                }); 

                map.addLayer({
                    'id': 'midpoint_all',
                    'type': 'circle', //fill, line, symbol, circle, heatmap, fill-extrusion, raster, hillshade, background
                    'source': 'midpoint_all',
                    'layout': {
                    'visibility': 'none'
                    },
                    'paint': {
                        'circle-radius': 18,
                        'circle-color': 'rgba(0,255,0,0)' // pin color
                    },
                }); 

             
                //-----------------------------------------------------------------
                var layers = map.getStyle().layers;
                var labelLayerId;
                for (var i = 0; i < layers.length; i++) {
                    if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
                        labelLayerId = layers[i].id;
                        break;
                    }
                }

                map.addLayer({
                    'id': '3d-buildings',
                    'source': 'composite',
                    'source-layer': 'building',
                    'filter': ['==', 'extrude', 'true'],
                    'type': 'fill-extrusion',
                    'minzoom': 15,
                    'paint': {
                        'fill-extrusion-color': '#aaa',

                        // use an 'interpolate' expression to add a smooth transition effect to the
                        // buildings as the user zooms in
                        'fill-extrusion-height': [
                            "interpolate", ["linear"], ["zoom"],
                            15, 0,
                            15.05, ["get", "height"]
                        ],
                        'fill-extrusion-base': [
                            "interpolate", ["linear"], ["zoom"],
                            15, 0,
                            15.05, ["get", "min_height"]
                        ],
                        'fill-extrusion-opacity': .6
                    }
                }, labelLayerId);

                map.getSource('colabs')._data.features.forEach(function(marker) {
                    let pin_url;
                    switch (marker.properties.lang) {
                        case "ruby": 
                            pin_url = 'url(https://next-academy-group-1-coder-bot.herokuapp.com/assets/selected_user_ruby-f9e7c67ae8ff82488b5c76c39acd3e59986b9da9bf3bc264ed8f5ee35f7ff1d4.gif)'
                            break;
                        case "javascript":
                            pin_url = 'url(https://next-academy-group-1-coder-bot.herokuapp.com/assets/selected_user_js-fcfe1f683250bcfb04668263143e2b63e31eebfd2656c31ea6c3f7454c6af974.gif)'
                            break;
                        case "python":
                            pin_url = 'url(https://next-academy-group-1-coder-bot.herokuapp.com/assets/selected_user_python-2944811398096b663838b230aa84d0f14c870609d07835bd8ce4e0c135e368bf.gif)'
                            break;
                        case "css":
                            pin_url = 'url(https://next-academy-group-1-coder-bot.herokuapp.com/assets/selected_user_hypercss-41d9e7bc0d76d0daeaeb7d10ae12ebabd63dac5da3d0ee39bf34749649e1a593.gif)'
                            break;
                    }
                    let el = document.createElement('div');
                    el.className = 'marker';
                    el.style.backgroundImage = pin_url;
                    // add marker to map
                    new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).addTo(map);
                });

                map.getSource('destination')._data.features.forEach(function(marker) {
                    let el = document.createElement('div');
                    el.className = 'marker';
                    el.style.backgroundImage = 'url(https://next-academy-group-1-coder-bot.herokuapp.com/assets/coderbot_head-336fa35287d0221cadcbf78a70390f3a9abada5d383781b1e05753bf70320c27.gif)';
                    new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).addTo(map);
                    $('.marker').css('height', '50px');
                    $('.marker').css('left', '');
                });

                map.getSource('midpoint_all')._data.features.forEach(function(marker) {
                    let el = document.createElement('div');
                    el.className = 'marker m_all d-none';
                    el.style.backgroundImage = 'url(https://next-academy-group-1-coder-bot.herokuapp.com/assets/coderbot_head-336fa35287d0221cadcbf78a70390f3a9abada5d383781b1e05753bf70320c27.gif)';
                    new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).addTo(map);
                    $('.marker').css('height', '50px');
                    $('.marker').css('left', '');
                });

                if ($('#menu_event_pg')[0].children.length < 1) {
                    var toggleableLayerIds = [ 'midpoint_all'];
                    for (var i = 0; i < toggleableLayerIds.length; i++) {
                        var link = document.createElement('a');
                        link.href = '#';
                        link.className = 'mr-3 ml-2 mb-2 btn btn-light';
                        link.textContent = 'Show All Meeting Points';
                        link.onclick = function (e) {
                            var clickedLayer = 'midpoint_all';
                            e.preventDefault();
                            e.stopPropagation();
                            var visibility = map.getLayoutProperty(clickedLayer, 'visibility');
                            if (visibility === 'visible') {
                                map.setLayoutProperty(clickedLayer, 'visibility', 'none');
                                $(`.${clickedLayer}`).addClass('d-none');
                                this.className = 'mr-3 ml-2 mb-2 btn btn-light';
                                $('.m_all').addClass('d-none');
                            } else {
                                this.className = 'active mr-3 ml-2 mb-2 btn btn-primary';
                                $(`.${clickedLayer}`).removeClass('d-none');
                                map.setLayoutProperty(clickedLayer, 'visibility', 'visible');
                                $('.m_all').removeClass('d-none');
                            }
                        };
                        var layers = document.getElementById('menu_event_pg');
                        layers.append(link);
                    }
                }
                afterLoad();


                <% if @event.midpoint_id != 1 %>
                    console.log('true');                
                    let query = map.getSource('colabs')._options.data.features;
                    $('#route_detail p').remove(); //clears all previous detail
                    $('#meet_point p').remove(); //clear previos detail
                    clear_routes(nos_routes); //clears all previous route
                    nos_routes = query.length; //for clear_routes use on next click
                    var coordinates = [<%= @event.midpoint.longtitude %>, <%= @event.midpoint.latitude %>];
                    for (let i = 0; i < query.length; i++) { // get all routes to point to target location
                        let start_point = query[i].center;
                        getRoute(start_point, coordinates, query[i], i);
                    }
                    
                    map.flyTo({
                        center: coordinates,
                        zoom: 12,
                    });

                
                <% end %>
            //-----------------------------------------------------------------success call end
            },
            error: function(error){
                console.log(error);
            }
        });
    });

    //------------------ Display
    var popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false
    });

    map.on('mouseenter', 'colabs', function(e) { //action, name
        // Change the cursor style as a UI indicator.
        map.getCanvas().style.cursor = 'pointer';

        var coordinates = e.features[0].geometry.coordinates.slice();
        var description = e.features[0].properties.description;
        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
    
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
        console.log(coordinates);
        // Populate the popup and set its coordinates
        // based on the feature found.
        popup.setLngLat(coordinates).setHTML(description).addTo(map);
    });

    map.on('click', 'colabs', function() {
        map.getCanvas().style.cursor = '';
        popup.remove();
    });

    map.on('mouseenter', 'destination', function(e) { mouseEnterDes(e) });
    map.on('mouseenter', 'midpoint_all', function(e) { mouseEnterDes(e) });

    map.on('click', 'destination', function(e) { mouseClickDes(e) });
    map.on('click', 'midpoint_all', function(e) { mouseClickDes(e) });

    map.on('click', function() { //remove popup when click anywhere on the map
        map.getCanvas().style.cursor = '';
        popup.remove();
    });




    //----------------------------------------------------------------------------------------------------------------------------------------------
    function mouseEnterDes(e) {
        // Change the cursor style as a UI indicator.
        map.getCanvas().style.cursor = 'pointer';
        var coordinates = e.features[0].geometry.coordinates.slice();
        var name = e.features[0].properties.name;

        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        // Populate the popup and set its coordinates
        // based on the feature found.
        popup.setLngLat(coordinates).setHTML(name).addTo(map);
    }

    function mouseClickDes(e) {
        console.log(e);
        map.getCanvas().style.cursor = '';
        popup.remove();
        let feature = e.features[0];
        let end_point = feature.geometry.coordinates.slice(); //end point

        map.flyTo({
            center: end_point,
            zoom: 18,
        });

        let query = map.getSource('colabs')._options.data.features;
        $('#route_detail p').remove(); //clears all previous detail
        $('#meet_point p').remove(); //clear previos detail
        clear_routes(nos_routes); //clears all previous route
        nos_routes = query.length; //for clear_routes use on next click

        for (let i = 0; i < query.length; i++) { // get all routes to point to target location
            let start_point = query[i].center;
            getRoute(start_point, end_point, query[i], i);
        }
        
        let properties = feature.properties
        let new_p = document.createElement('p');
        new_p.innerHTML = `<h4>Meeting Point</h4>${properties.name} <form action="/event/<%= @event.id %>/midpoint/${properties.midpoint_id}" data-remote="true"><%= hidden_field_tag :authenticity_token, form_authenticity_token -%><br> Description: ${properties.description} <br> Address: ${properties.address}<br> Category: ${properties.category} <br><button type="submit" class="btn btn-success" formaction="/event/<%= @event.id %>/midpoint/${properties.midpoint_id}" formmethod="post">Set Meeting Here</button></form>`;
        $('#meet_point').append(new_p);
    }

    function clear_routes(n) { //removes all existing map routes
        for (let i = 0; i < n; i++) {
            if (map.getSource(`route_${i}`)) {
                map.removeLayer(`route_${i}`);
                map.removeSource(`route_${i}`);
            }
        }
    }

    function clear_all_layer() { //removes all layers
        if (map.getSource(`colabs`)) {
            map.removeLayer(`colabs`);
            map.removeSource(`colabs`);
        }
    }

    function getRoute(start, end, start_loc, i) {
        // make a directions request using cycling profile
        // an arbitrary start will always be the same
        // only the end or destination will change
   
        var url = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
        // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
        var req = new XMLHttpRequest();
        req.responseType = 'json';
        req.open('GET', url, true);
        console.log(url);
        console.log(req);
        req.onload = function() {
            console.log('within function');
            var data = req.response.routes[0];
            let trip_duration = data.duration;
            let trip_distance = data.distance;
            var route = data.geometry.coordinates;
            var geojson = {
                type: 'Feature',
                properties: {},
                geometry: {
                    type: 'LineString',
                    coordinates: route
                }
            };
            map.addLayer({ //setting routes
                id: `route_${i}`,
                type: 'line',
                source: {
                    type: 'geojson',
                    data: {
                        type: 'Feature',
                        properties: {},
                        geometry: {
                        type: 'LineString',
                        coordinates: geojson
                        }
                    }
                },
                layout: {
                    'line-join': 'round',
                    'line-cap': 'round'
                },
                paint: {
                    'line-color': '#3887be',
                    'line-width': 5,
                    'line-opacity': 0.75
                }
            });
            map.getSource(`route_${i}`).setData(geojson);
            // if the route already exists on the map, reset it using setData
            // add turn instructions here at the end
            //write to description
            let new_p = document.createElement('p');

            var dist = parseFloat(trip_distance / 1000).toFixed(1);
            var text_class;
            if (dist > 100) { text_class = "text-danger"; }
            var jour_det = `Journey: <span class="journey_detail ${text_class}">${parseFloat(trip_duration / 60).toFixed(1)} minutes across <span class="journey_dist">${dist}</span> km </span>`;
            new_p.innerHTML = `${start_loc.properties.username} // ${start_loc.properties.user_mail} <br>${jour_det}`;
            // $('#route_detail').append(new_p);


            if (dist > 100) { text_class = "exceed_range"; }
            let el = document.createElement('div');
            el.className = `map_journey_detail ${text_class}`;
            el.innerHTML = `<span class="">${parseFloat(trip_duration / 60).toFixed(1)} mins across <span class="journey_dist">${dist}</span> km </span>`;
            new mapboxgl.Marker(el).setLngLat(start).addTo(map);
        };
        req.send();
    } //get route function end

// MAPBOX SCRIPT END
//-------------------------------------------------------------------------------------
}) //turbolinks end

</script>