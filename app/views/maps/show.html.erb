!-- mapbox search bar start -->
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v3.1.0/mapbox-gl-geocoder.min.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v3.1.0/mapbox-gl-geocoder.css' type='text/css' />
<!-- mapbox search bar end -->

<nav id="menu"></nav>
<div id='map' class="w-100" style='height: 80vh;'></div>

<script>
$(document).on('turbolinks:load', function(){
//-----------------------------------------------------------------------------
// MAPBOX SCRIPT START
    let nos_routes = 0; //for clear_routes
    var center_calc = `${<%= @center %>}`;
    center_calc = center_calc.split(',');
    let center_cor = [parseFloat(center_calc[0]), parseFloat(center_calc[1])];
    mapboxgl.accessToken = 'pk.eyJ1IjoibGVvbmZ1cnkiLCJhIjoiY2pyaDUxNDZnMDQ0bzQ1cWp0MjFqNDh5aSJ9.lXa113BsThiaf5YBcxwQFA';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: center_cor, // kuala lumpur //to be dynamic
        zoom: center_calc[2],
        pitch: 45, //pitch adjusts view from above
        bearing: 0, //bearings adjust latitude baseline
    });

    map.addControl(new MapboxGeocoder({
        accessToken: mapboxgl.accessToken
    }));
    map.on("load", () => {
        $.ajax({
            url: "/map",
            method: "POST",
            dataType: "JSON",
            success: function(response){
                console.log(response);

                map.addSource('Ruby', {
                    type: 'geojson',
                    data: response[0]
                }); 
                
                map.addLayer({
                    'id': 'Ruby',
                    'type': 'circle', //fill, line, symbol, circle, heatmap, fill-extrusion, raster, hillshade, background
                    'source': 'Ruby',
                    'layout': {
                    'visibility': 'visible'
                    },
                    'paint': {
                        'circle-radius': 10,
                        'circle-color': 'rgba(255,0,0,1)' // pin color
                    },
                }); 

                map.addSource('Python', {
                    type: 'geojson',
                    data: response[1]
                }); 
                
                map.addLayer({
                    'id': 'Python',
                    'type': 'circle', //fill, line, symbol, circle, heatmap, fill-extrusion, raster, hillshade, background
                    'source': 'Python',
                    'layout': {
                    'visibility': 'visible'
                    },
                    'paint': {
                        'circle-radius': 10,
                        'circle-color': 'rgba(0,255,0,1)' // pin color
                    },
                }); 

                map.addSource('Java-Script', {
                    type: 'geojson',
                    data: response[2]
                }); 
                
                map.addLayer({
                    'id': 'Java-Script',
                    'type': 'circle', //fill, line, symbol, circle, heatmap, fill-extrusion, raster, hillshade, background
                    'source': 'Java-Script',
                    'layout': {
                    'visibility': 'visible'
                    },
                    'paint': {
                        'circle-radius': 10,
                        'circle-color': 'rgba(0,0,255,1)' // pin color
                    },
                }); 

                map.addSource('HTML-CSS', {
                    type: 'geojson',
                    data: response[3]
                }); 
                
                map.addLayer({
                    'id': 'HTML-CSS',
                    'type': 'circle', //fill, line, symbol, circle, heatmap, fill-extrusion, raster, hillshade, background
                    'source': 'HTML-CSS',
                    'layout': {
                    'visibility': 'visible'
                    },
                    'paint': {
                        'circle-radius': 10,
                        'circle-color': 'rgba(100,100,100,1)' // pin color
                    },
                }); 

                //-----------------------------------------------------------------
                var layers = map.getStyle().layers;
                var labelLayerId;
                for (var i = 0; i < layers.length; i++) {
                    if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
                        labelLayerId = layers[i].id;
                        break;
                    }
                }

                map.addLayer({
                    'id': '3d-buildings',
                    'source': 'composite',
                    'source-layer': 'building',
                    'filter': ['==', 'extrude', 'true'],
                    'type': 'fill-extrusion',
                    'minzoom': 15,
                    'paint': {
                        'fill-extrusion-color': '#aaa',

                        // use an 'interpolate' expression to add a smooth transition effect to the
                        // buildings as the user zooms in
                        'fill-extrusion-height': [
                            "interpolate", ["linear"], ["zoom"],
                            15, 0,
                            15.05, ["get", "height"]
                        ],
                        'fill-extrusion-base': [
                            "interpolate", ["linear"], ["zoom"],
                            15, 0,
                            15.05, ["get", "min_height"]
                        ],
                        'fill-extrusion-opacity': .6
                    }
                }, labelLayerId);

                map.getSource('Ruby')._data.features.forEach(function(marker) { mapMarker(marker, 'Ruby', 'url(/assets/pin_ruby.gif)') });
                map.getSource('Python')._data.features.forEach(function(marker) { mapMarker(marker, 'Python', 'url(/assets/pin_python.gif)') });
                map.getSource('Java-Script')._data.features.forEach(function(marker) { mapMarker(marker, 'Java-Script', 'url(/assets/pin_js.gif)') });
                map.getSource('HTML-CSS')._data.features.forEach(function(marker) { mapMarker(marker, 'HTML-CSS','url(/assets/pin_hypercss.gif)') });
            //-----------------------------------------------------------------success call end
            },
            error: function(error){
                console.log(error);
            }
        });
    });

    //------------------ Display
    var popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false
    });

    map.on('mouseenter', 'Ruby', function(e) {mapPopup(e)});
    map.on('mouseenter', 'Python', function(e) {mapPopup(e)});
    map.on('mouseenter', 'Java-Script', function(e) {mapPopup(e)});
    map.on('mouseenter', 'HTML-CSS', function(e) {mapPopup(e)});

    map.on('click', function() { //remove popup when click anywhere on the map
        map.getCanvas().style.cursor = '';
        popup.remove();
    });


    function mapPopup(e) {
        // Change the cursor style as a UI indicator.
        map.getCanvas().style.cursor = 'pointer';

        var coordinates = e.features[0].geometry.coordinates.slice();
        var description = e.features[0].properties.description;

        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        // Populate the popup and set its coordinates
        // based on the feature found.
        popup.setLngLat(coordinates)
            .setHTML(description)
            .addTo(map);
    }

    function mapMarker(marker, lang, marker_img) {
        let el = document.createElement('div');
        el.className = `marker ${lang}`;
        el.style.backgroundImage = marker_img;
        new mapboxgl.Marker(el).setLngLat(marker.geometry.coordinates).addTo(map);
    }

    var toggleableLayerIds = [ 'Ruby', 'Python', 'Java-Script', 'HTML-CSS' ];

    for (var i = 0; i < toggleableLayerIds.length; i++) {
        var id = toggleableLayerIds[i];
        var link = document.createElement('a');
        link.href = '#';
        link.className = 'active mr-3 ml-2 mb-2 btn btn-primary';
        link.textContent = id;
        link.onclick = function (e) {
            var clickedLayer = this.textContent;
            e.preventDefault();
            e.stopPropagation();
            var visibility = map.getLayoutProperty(clickedLayer, 'visibility');
            if (visibility === 'visible') {
                map.setLayoutProperty(clickedLayer, 'visibility', 'none');
                $(`.${clickedLayer}`).addClass('d-none');
                this.className = 'mr-3 ml-2 mb-2 btn btn-light';
            } else {
                this.className = 'active mr-3 ml-2 mb-2 btn btn-primary';
                $(`.${clickedLayer}`).removeClass('d-none');
                map.setLayoutProperty(clickedLayer, 'visibility', 'visible');
            }
        };

        var layers = document.getElementById('menu');
        layers.appendChild(link);
    }
// MAPBOX SCRIPT END
//-------------------------------------------------------------------------------------
}) //turbolinks end

</script>